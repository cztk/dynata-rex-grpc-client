// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: definition.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_definition_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_definition_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_definition_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_definition_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_definition_2eproto;
namespace eventstream {
class Auth;
class AuthDefaultTypeInternal;
extern AuthDefaultTypeInternal _Auth_default_instance_;
class Event;
class EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
class Event_End;
class Event_EndDefaultTypeInternal;
extern Event_EndDefaultTypeInternal _Event_End_default_instance_;
class Event_Start;
class Event_StartDefaultTypeInternal;
extern Event_StartDefaultTypeInternal _Event_Start_default_instance_;
}  // namespace eventstream
PROTOBUF_NAMESPACE_OPEN
template<> ::eventstream::Auth* Arena::CreateMaybeMessage<::eventstream::Auth>(Arena*);
template<> ::eventstream::Event* Arena::CreateMaybeMessage<::eventstream::Event>(Arena*);
template<> ::eventstream::Event_End* Arena::CreateMaybeMessage<::eventstream::Event_End>(Arena*);
template<> ::eventstream::Event_Start* Arena::CreateMaybeMessage<::eventstream::Event_Start>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace eventstream {

// ===================================================================

class Auth PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eventstream.Auth) */ {
 public:
  inline Auth() : Auth(nullptr) {};
  virtual ~Auth();

  Auth(const Auth& from);
  Auth(Auth&& from) noexcept
    : Auth() {
    *this = ::std::move(from);
  }

  inline Auth& operator=(const Auth& from) {
    CopyFrom(from);
    return *this;
  }
  inline Auth& operator=(Auth&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Auth& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Auth* internal_default_instance() {
    return reinterpret_cast<const Auth*>(
               &_Auth_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Auth& a, Auth& b) {
    a.Swap(&b);
  }
  inline void Swap(Auth* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Auth* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Auth* New() const final {
    return CreateMaybeMessage<Auth>(nullptr);
  }

  Auth* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Auth>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Auth& from);
  void MergeFrom(const Auth& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Auth* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eventstream.Auth";
  }
  protected:
  explicit Auth(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_definition_2eproto);
    return ::descriptor_table_definition_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExpirationFieldNumber = 1,
    kAccessKeyFieldNumber = 2,
    kSignatureFieldNumber = 3,
  };
  // string expiration = 1;
  void clear_expiration();
  const std::string& expiration() const;
  void set_expiration(const std::string& value);
  void set_expiration(std::string&& value);
  void set_expiration(const char* value);
  void set_expiration(const char* value, size_t size);
  std::string* mutable_expiration();
  std::string* release_expiration();
  void set_allocated_expiration(std::string* expiration);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_expiration();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_expiration(
      std::string* expiration);
  private:
  const std::string& _internal_expiration() const;
  void _internal_set_expiration(const std::string& value);
  std::string* _internal_mutable_expiration();
  public:

  // string access_key = 2;
  void clear_access_key();
  const std::string& access_key() const;
  void set_access_key(const std::string& value);
  void set_access_key(std::string&& value);
  void set_access_key(const char* value);
  void set_access_key(const char* value, size_t size);
  std::string* mutable_access_key();
  std::string* release_access_key();
  void set_allocated_access_key(std::string* access_key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_access_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_access_key(
      std::string* access_key);
  private:
  const std::string& _internal_access_key() const;
  void _internal_set_access_key(const std::string& value);
  std::string* _internal_mutable_access_key();
  public:

  // string signature = 3;
  void clear_signature();
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const char* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_signature();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_signature(
      std::string* signature);
  private:
  const std::string& _internal_signature() const;
  void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // @@protoc_insertion_point(class_scope:eventstream.Auth)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr expiration_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr access_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_definition_2eproto;
};
// -------------------------------------------------------------------

class Event_Start PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eventstream.Event.Start) */ {
 public:
  inline Event_Start() : Event_Start(nullptr) {};
  virtual ~Event_Start();

  Event_Start(const Event_Start& from);
  Event_Start(Event_Start&& from) noexcept
    : Event_Start() {
    *this = ::std::move(from);
  }

  inline Event_Start& operator=(const Event_Start& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event_Start& operator=(Event_Start&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Event_Start& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event_Start* internal_default_instance() {
    return reinterpret_cast<const Event_Start*>(
               &_Event_Start_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Event_Start& a, Event_Start& b) {
    a.Swap(&b);
  }
  inline void Swap(Event_Start* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event_Start* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Event_Start* New() const final {
    return CreateMaybeMessage<Event_Start>(nullptr);
  }

  Event_Start* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Event_Start>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Event_Start& from);
  void MergeFrom(const Event_Start& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event_Start* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eventstream.Event.Start";
  }
  protected:
  explicit Event_Start(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_definition_2eproto);
    return ::descriptor_table_definition_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
  };
  // int64 group_id = 1;
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::int64 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_group_id() const;
  void _internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:eventstream.Event.Start)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 group_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_definition_2eproto;
};
// -------------------------------------------------------------------

class Event_End PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eventstream.Event.End) */ {
 public:
  inline Event_End() : Event_End(nullptr) {};
  virtual ~Event_End();

  Event_End(const Event_End& from);
  Event_End(Event_End&& from) noexcept
    : Event_End() {
    *this = ::std::move(from);
  }

  inline Event_End& operator=(const Event_End& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event_End& operator=(Event_End&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Event_End& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event_End* internal_default_instance() {
    return reinterpret_cast<const Event_End*>(
               &_Event_End_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Event_End& a, Event_End& b) {
    a.Swap(&b);
  }
  inline void Swap(Event_End* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event_End* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Event_End* New() const final {
    return CreateMaybeMessage<Event_End>(nullptr);
  }

  Event_End* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Event_End>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Event_End& from);
  void MergeFrom(const Event_End& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event_End* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eventstream.Event.End";
  }
  protected:
  explicit Event_End(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_definition_2eproto);
    return ::descriptor_table_definition_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDispositionFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // string disposition = 1;
  void clear_disposition();
  const std::string& disposition() const;
  void set_disposition(const std::string& value);
  void set_disposition(std::string&& value);
  void set_disposition(const char* value);
  void set_disposition(const char* value, size_t size);
  std::string* mutable_disposition();
  std::string* release_disposition();
  void set_allocated_disposition(std::string* disposition);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_disposition();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_disposition(
      std::string* disposition);
  private:
  const std::string& _internal_disposition() const;
  void _internal_set_disposition(const std::string& value);
  std::string* _internal_mutable_disposition();
  public:

  // string status = 2;
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_status();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_status(
      std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:eventstream.Event.End)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr disposition_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_definition_2eproto;
};
// -------------------------------------------------------------------

class Event PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eventstream.Event) */ {
 public:
  inline Event() : Event(nullptr) {};
  virtual ~Event();

  Event(const Event& from);
  Event(Event&& from) noexcept
    : Event() {
    *this = ::std::move(from);
  }

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event& operator=(Event&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Event& default_instance();

  enum DataCase {
    kStart = 2,
    kEnd = 3,
    DATA_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
               &_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Event& a, Event& b) {
    a.Swap(&b);
  }
  inline void Swap(Event* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Event* New() const final {
    return CreateMaybeMessage<Event>(nullptr);
  }

  Event* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Event>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eventstream.Event";
  }
  protected:
  explicit Event(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_definition_2eproto);
    return ::descriptor_table_definition_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Event_Start Start;
  typedef Event_End End;

  // accessors -------------------------------------------------------

  enum : int {
    kSessionFieldNumber = 1,
    kTimestampFieldNumber = 4,
    kStartFieldNumber = 2,
    kEndFieldNumber = 3,
  };
  // string session = 1;
  void clear_session();
  const std::string& session() const;
  void set_session(const std::string& value);
  void set_session(std::string&& value);
  void set_session(const char* value);
  void set_session(const char* value, size_t size);
  std::string* mutable_session();
  std::string* release_session();
  void set_allocated_session(std::string* session);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_session();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_session(
      std::string* session);
  private:
  const std::string& _internal_session() const;
  void _internal_set_session(const std::string& value);
  std::string* _internal_mutable_session();
  public:

  // string timestamp = 4;
  void clear_timestamp();
  const std::string& timestamp() const;
  void set_timestamp(const std::string& value);
  void set_timestamp(std::string&& value);
  void set_timestamp(const char* value);
  void set_timestamp(const char* value, size_t size);
  std::string* mutable_timestamp();
  std::string* release_timestamp();
  void set_allocated_timestamp(std::string* timestamp);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_timestamp();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_timestamp(
      std::string* timestamp);
  private:
  const std::string& _internal_timestamp() const;
  void _internal_set_timestamp(const std::string& value);
  std::string* _internal_mutable_timestamp();
  public:

  // .eventstream.Event.Start start = 2;
  bool has_start() const;
  private:
  bool _internal_has_start() const;
  public:
  void clear_start();
  const ::eventstream::Event_Start& start() const;
  ::eventstream::Event_Start* release_start();
  ::eventstream::Event_Start* mutable_start();
  void set_allocated_start(::eventstream::Event_Start* start);
  private:
  const ::eventstream::Event_Start& _internal_start() const;
  ::eventstream::Event_Start* _internal_mutable_start();
  public:
  void unsafe_arena_set_allocated_start(
      ::eventstream::Event_Start* start);
  ::eventstream::Event_Start* unsafe_arena_release_start();

  // .eventstream.Event.End end = 3;
  bool has_end() const;
  private:
  bool _internal_has_end() const;
  public:
  void clear_end();
  const ::eventstream::Event_End& end() const;
  ::eventstream::Event_End* release_end();
  ::eventstream::Event_End* mutable_end();
  void set_allocated_end(::eventstream::Event_End* end);
  private:
  const ::eventstream::Event_End& _internal_end() const;
  ::eventstream::Event_End* _internal_mutable_end();
  public:
  void unsafe_arena_set_allocated_end(
      ::eventstream::Event_End* end);
  ::eventstream::Event_End* unsafe_arena_release_end();

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:eventstream.Event)
 private:
  class _Internal;
  void set_has_start();
  void set_has_end();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timestamp_;
  union DataUnion {
    DataUnion() {}
    ::eventstream::Event_Start* start_;
    ::eventstream::Event_End* end_;
  } data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_definition_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Auth

// string expiration = 1;
inline void Auth::clear_expiration() {
  expiration_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Auth::expiration() const {
  // @@protoc_insertion_point(field_get:eventstream.Auth.expiration)
  return _internal_expiration();
}
inline void Auth::set_expiration(const std::string& value) {
  _internal_set_expiration(value);
  // @@protoc_insertion_point(field_set:eventstream.Auth.expiration)
}
inline std::string* Auth::mutable_expiration() {
  // @@protoc_insertion_point(field_mutable:eventstream.Auth.expiration)
  return _internal_mutable_expiration();
}
inline const std::string& Auth::_internal_expiration() const {
  return expiration_.Get();
}
inline void Auth::_internal_set_expiration(const std::string& value) {
  
  expiration_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Auth::set_expiration(std::string&& value) {
  
  expiration_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:eventstream.Auth.expiration)
}
inline void Auth::set_expiration(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  expiration_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:eventstream.Auth.expiration)
}
inline void Auth::set_expiration(const char* value,
    size_t size) {
  
  expiration_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:eventstream.Auth.expiration)
}
inline std::string* Auth::_internal_mutable_expiration() {
  
  return expiration_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Auth::release_expiration() {
  // @@protoc_insertion_point(field_release:eventstream.Auth.expiration)
  return expiration_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Auth::set_allocated_expiration(std::string* expiration) {
  if (expiration != nullptr) {
    
  } else {
    
  }
  expiration_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), expiration,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:eventstream.Auth.expiration)
}
inline std::string* Auth::unsafe_arena_release_expiration() {
  // @@protoc_insertion_point(field_unsafe_arena_release:eventstream.Auth.expiration)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return expiration_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Auth::unsafe_arena_set_allocated_expiration(
    std::string* expiration) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (expiration != nullptr) {
    
  } else {
    
  }
  expiration_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      expiration, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:eventstream.Auth.expiration)
}

// string access_key = 2;
inline void Auth::clear_access_key() {
  access_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Auth::access_key() const {
  // @@protoc_insertion_point(field_get:eventstream.Auth.access_key)
  return _internal_access_key();
}
inline void Auth::set_access_key(const std::string& value) {
  _internal_set_access_key(value);
  // @@protoc_insertion_point(field_set:eventstream.Auth.access_key)
}
inline std::string* Auth::mutable_access_key() {
  // @@protoc_insertion_point(field_mutable:eventstream.Auth.access_key)
  return _internal_mutable_access_key();
}
inline const std::string& Auth::_internal_access_key() const {
  return access_key_.Get();
}
inline void Auth::_internal_set_access_key(const std::string& value) {
  
  access_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Auth::set_access_key(std::string&& value) {
  
  access_key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:eventstream.Auth.access_key)
}
inline void Auth::set_access_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  access_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:eventstream.Auth.access_key)
}
inline void Auth::set_access_key(const char* value,
    size_t size) {
  
  access_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:eventstream.Auth.access_key)
}
inline std::string* Auth::_internal_mutable_access_key() {
  
  return access_key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Auth::release_access_key() {
  // @@protoc_insertion_point(field_release:eventstream.Auth.access_key)
  return access_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Auth::set_allocated_access_key(std::string* access_key) {
  if (access_key != nullptr) {
    
  } else {
    
  }
  access_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), access_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:eventstream.Auth.access_key)
}
inline std::string* Auth::unsafe_arena_release_access_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:eventstream.Auth.access_key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return access_key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Auth::unsafe_arena_set_allocated_access_key(
    std::string* access_key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (access_key != nullptr) {
    
  } else {
    
  }
  access_key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      access_key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:eventstream.Auth.access_key)
}

// string signature = 3;
inline void Auth::clear_signature() {
  signature_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Auth::signature() const {
  // @@protoc_insertion_point(field_get:eventstream.Auth.signature)
  return _internal_signature();
}
inline void Auth::set_signature(const std::string& value) {
  _internal_set_signature(value);
  // @@protoc_insertion_point(field_set:eventstream.Auth.signature)
}
inline std::string* Auth::mutable_signature() {
  // @@protoc_insertion_point(field_mutable:eventstream.Auth.signature)
  return _internal_mutable_signature();
}
inline const std::string& Auth::_internal_signature() const {
  return signature_.Get();
}
inline void Auth::_internal_set_signature(const std::string& value) {
  
  signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Auth::set_signature(std::string&& value) {
  
  signature_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:eventstream.Auth.signature)
}
inline void Auth::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:eventstream.Auth.signature)
}
inline void Auth::set_signature(const char* value,
    size_t size) {
  
  signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:eventstream.Auth.signature)
}
inline std::string* Auth::_internal_mutable_signature() {
  
  return signature_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Auth::release_signature() {
  // @@protoc_insertion_point(field_release:eventstream.Auth.signature)
  return signature_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Auth::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:eventstream.Auth.signature)
}
inline std::string* Auth::unsafe_arena_release_signature() {
  // @@protoc_insertion_point(field_unsafe_arena_release:eventstream.Auth.signature)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return signature_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Auth::unsafe_arena_set_allocated_signature(
    std::string* signature) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      signature, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:eventstream.Auth.signature)
}

// -------------------------------------------------------------------

// Event_Start

// int64 group_id = 1;
inline void Event_Start::clear_group_id() {
  group_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Event_Start::_internal_group_id() const {
  return group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Event_Start::group_id() const {
  // @@protoc_insertion_point(field_get:eventstream.Event.Start.group_id)
  return _internal_group_id();
}
inline void Event_Start::_internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  group_id_ = value;
}
inline void Event_Start::set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:eventstream.Event.Start.group_id)
}

// -------------------------------------------------------------------

// Event_End

// string disposition = 1;
inline void Event_End::clear_disposition() {
  disposition_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Event_End::disposition() const {
  // @@protoc_insertion_point(field_get:eventstream.Event.End.disposition)
  return _internal_disposition();
}
inline void Event_End::set_disposition(const std::string& value) {
  _internal_set_disposition(value);
  // @@protoc_insertion_point(field_set:eventstream.Event.End.disposition)
}
inline std::string* Event_End::mutable_disposition() {
  // @@protoc_insertion_point(field_mutable:eventstream.Event.End.disposition)
  return _internal_mutable_disposition();
}
inline const std::string& Event_End::_internal_disposition() const {
  return disposition_.Get();
}
inline void Event_End::_internal_set_disposition(const std::string& value) {
  
  disposition_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Event_End::set_disposition(std::string&& value) {
  
  disposition_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:eventstream.Event.End.disposition)
}
inline void Event_End::set_disposition(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  disposition_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:eventstream.Event.End.disposition)
}
inline void Event_End::set_disposition(const char* value,
    size_t size) {
  
  disposition_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:eventstream.Event.End.disposition)
}
inline std::string* Event_End::_internal_mutable_disposition() {
  
  return disposition_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Event_End::release_disposition() {
  // @@protoc_insertion_point(field_release:eventstream.Event.End.disposition)
  return disposition_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Event_End::set_allocated_disposition(std::string* disposition) {
  if (disposition != nullptr) {
    
  } else {
    
  }
  disposition_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), disposition,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:eventstream.Event.End.disposition)
}
inline std::string* Event_End::unsafe_arena_release_disposition() {
  // @@protoc_insertion_point(field_unsafe_arena_release:eventstream.Event.End.disposition)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return disposition_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Event_End::unsafe_arena_set_allocated_disposition(
    std::string* disposition) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (disposition != nullptr) {
    
  } else {
    
  }
  disposition_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      disposition, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:eventstream.Event.End.disposition)
}

// string status = 2;
inline void Event_End::clear_status() {
  status_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Event_End::status() const {
  // @@protoc_insertion_point(field_get:eventstream.Event.End.status)
  return _internal_status();
}
inline void Event_End::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:eventstream.Event.End.status)
}
inline std::string* Event_End::mutable_status() {
  // @@protoc_insertion_point(field_mutable:eventstream.Event.End.status)
  return _internal_mutable_status();
}
inline const std::string& Event_End::_internal_status() const {
  return status_.Get();
}
inline void Event_End::_internal_set_status(const std::string& value) {
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Event_End::set_status(std::string&& value) {
  
  status_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:eventstream.Event.End.status)
}
inline void Event_End::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:eventstream.Event.End.status)
}
inline void Event_End::set_status(const char* value,
    size_t size) {
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:eventstream.Event.End.status)
}
inline std::string* Event_End::_internal_mutable_status() {
  
  return status_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Event_End::release_status() {
  // @@protoc_insertion_point(field_release:eventstream.Event.End.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Event_End::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:eventstream.Event.End.status)
}
inline std::string* Event_End::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:eventstream.Event.End.status)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return status_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Event_End::unsafe_arena_set_allocated_status(
    std::string* status) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (status != nullptr) {
    
  } else {
    
  }
  status_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      status, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:eventstream.Event.End.status)
}

// -------------------------------------------------------------------

// Event

// string session = 1;
inline void Event::clear_session() {
  session_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Event::session() const {
  // @@protoc_insertion_point(field_get:eventstream.Event.session)
  return _internal_session();
}
inline void Event::set_session(const std::string& value) {
  _internal_set_session(value);
  // @@protoc_insertion_point(field_set:eventstream.Event.session)
}
inline std::string* Event::mutable_session() {
  // @@protoc_insertion_point(field_mutable:eventstream.Event.session)
  return _internal_mutable_session();
}
inline const std::string& Event::_internal_session() const {
  return session_.Get();
}
inline void Event::_internal_set_session(const std::string& value) {
  
  session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Event::set_session(std::string&& value) {
  
  session_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:eventstream.Event.session)
}
inline void Event::set_session(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:eventstream.Event.session)
}
inline void Event::set_session(const char* value,
    size_t size) {
  
  session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:eventstream.Event.session)
}
inline std::string* Event::_internal_mutable_session() {
  
  return session_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Event::release_session() {
  // @@protoc_insertion_point(field_release:eventstream.Event.session)
  return session_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Event::set_allocated_session(std::string* session) {
  if (session != nullptr) {
    
  } else {
    
  }
  session_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:eventstream.Event.session)
}
inline std::string* Event::unsafe_arena_release_session() {
  // @@protoc_insertion_point(field_unsafe_arena_release:eventstream.Event.session)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return session_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Event::unsafe_arena_set_allocated_session(
    std::string* session) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (session != nullptr) {
    
  } else {
    
  }
  session_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      session, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:eventstream.Event.session)
}

// .eventstream.Event.Start start = 2;
inline bool Event::_internal_has_start() const {
  return data_case() == kStart;
}
inline bool Event::has_start() const {
  return _internal_has_start();
}
inline void Event::set_has_start() {
  _oneof_case_[0] = kStart;
}
inline void Event::clear_start() {
  if (_internal_has_start()) {
    if (GetArena() == nullptr) {
      delete data_.start_;
    }
    clear_has_data();
  }
}
inline ::eventstream::Event_Start* Event::release_start() {
  // @@protoc_insertion_point(field_release:eventstream.Event.start)
  if (_internal_has_start()) {
    clear_has_data();
      ::eventstream::Event_Start* temp = data_.start_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::eventstream::Event_Start& Event::_internal_start() const {
  return _internal_has_start()
      ? *data_.start_
      : *reinterpret_cast< ::eventstream::Event_Start*>(&::eventstream::_Event_Start_default_instance_);
}
inline const ::eventstream::Event_Start& Event::start() const {
  // @@protoc_insertion_point(field_get:eventstream.Event.start)
  return _internal_start();
}
inline ::eventstream::Event_Start* Event::unsafe_arena_release_start() {
  // @@protoc_insertion_point(field_unsafe_arena_release:eventstream.Event.start)
  if (_internal_has_start()) {
    clear_has_data();
    ::eventstream::Event_Start* temp = data_.start_;
    data_.start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_start(::eventstream::Event_Start* start) {
  clear_data();
  if (start) {
    set_has_start();
    data_.start_ = start;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:eventstream.Event.start)
}
inline ::eventstream::Event_Start* Event::_internal_mutable_start() {
  if (!_internal_has_start()) {
    clear_data();
    set_has_start();
    data_.start_ = CreateMaybeMessage< ::eventstream::Event_Start >(GetArena());
  }
  return data_.start_;
}
inline ::eventstream::Event_Start* Event::mutable_start() {
  // @@protoc_insertion_point(field_mutable:eventstream.Event.start)
  return _internal_mutable_start();
}

// .eventstream.Event.End end = 3;
inline bool Event::_internal_has_end() const {
  return data_case() == kEnd;
}
inline bool Event::has_end() const {
  return _internal_has_end();
}
inline void Event::set_has_end() {
  _oneof_case_[0] = kEnd;
}
inline void Event::clear_end() {
  if (_internal_has_end()) {
    if (GetArena() == nullptr) {
      delete data_.end_;
    }
    clear_has_data();
  }
}
inline ::eventstream::Event_End* Event::release_end() {
  // @@protoc_insertion_point(field_release:eventstream.Event.end)
  if (_internal_has_end()) {
    clear_has_data();
      ::eventstream::Event_End* temp = data_.end_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::eventstream::Event_End& Event::_internal_end() const {
  return _internal_has_end()
      ? *data_.end_
      : *reinterpret_cast< ::eventstream::Event_End*>(&::eventstream::_Event_End_default_instance_);
}
inline const ::eventstream::Event_End& Event::end() const {
  // @@protoc_insertion_point(field_get:eventstream.Event.end)
  return _internal_end();
}
inline ::eventstream::Event_End* Event::unsafe_arena_release_end() {
  // @@protoc_insertion_point(field_unsafe_arena_release:eventstream.Event.end)
  if (_internal_has_end()) {
    clear_has_data();
    ::eventstream::Event_End* temp = data_.end_;
    data_.end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_end(::eventstream::Event_End* end) {
  clear_data();
  if (end) {
    set_has_end();
    data_.end_ = end;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:eventstream.Event.end)
}
inline ::eventstream::Event_End* Event::_internal_mutable_end() {
  if (!_internal_has_end()) {
    clear_data();
    set_has_end();
    data_.end_ = CreateMaybeMessage< ::eventstream::Event_End >(GetArena());
  }
  return data_.end_;
}
inline ::eventstream::Event_End* Event::mutable_end() {
  // @@protoc_insertion_point(field_mutable:eventstream.Event.end)
  return _internal_mutable_end();
}

// string timestamp = 4;
inline void Event::clear_timestamp() {
  timestamp_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Event::timestamp() const {
  // @@protoc_insertion_point(field_get:eventstream.Event.timestamp)
  return _internal_timestamp();
}
inline void Event::set_timestamp(const std::string& value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:eventstream.Event.timestamp)
}
inline std::string* Event::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:eventstream.Event.timestamp)
  return _internal_mutable_timestamp();
}
inline const std::string& Event::_internal_timestamp() const {
  return timestamp_.Get();
}
inline void Event::_internal_set_timestamp(const std::string& value) {
  
  timestamp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Event::set_timestamp(std::string&& value) {
  
  timestamp_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:eventstream.Event.timestamp)
}
inline void Event::set_timestamp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  timestamp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:eventstream.Event.timestamp)
}
inline void Event::set_timestamp(const char* value,
    size_t size) {
  
  timestamp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:eventstream.Event.timestamp)
}
inline std::string* Event::_internal_mutable_timestamp() {
  
  return timestamp_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Event::release_timestamp() {
  // @@protoc_insertion_point(field_release:eventstream.Event.timestamp)
  return timestamp_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Event::set_allocated_timestamp(std::string* timestamp) {
  if (timestamp != nullptr) {
    
  } else {
    
  }
  timestamp_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timestamp,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:eventstream.Event.timestamp)
}
inline std::string* Event::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:eventstream.Event.timestamp)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return timestamp_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Event::unsafe_arena_set_allocated_timestamp(
    std::string* timestamp) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (timestamp != nullptr) {
    
  } else {
    
  }
  timestamp_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      timestamp, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:eventstream.Event.timestamp)
}

inline bool Event::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void Event::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline Event::DataCase Event::data_case() const {
  return Event::DataCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace eventstream

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_definition_2eproto
